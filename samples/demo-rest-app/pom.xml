<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.pomegranate.demo</groupId>
    <artifactId>demo-rest-app</artifactId>
    <version>0.1</version>
    <packaging>war</packaging>

    <properties>
		<!-- set the project source code encoding to UTF-8-->
        <project.build.sourceEndcoding>UTF-8</project.build.sourceEndcoding>

        <java.version>1.8</java.version>
        <slf4j.version>1.7.22</slf4j.version>
        <logback.version>1.1.9</logback.version>
        <jersey.version>2.25</jersey.version>
        <jackson.version>2.8.6</jackson.version>
        <spring.version>4.3.6.RELEASE</spring.version>
        <testng.version>6.10</testng.version>
    </properties>

	<!--project build configuration-->
    <build>
		<!-- this will be the name of thw war file -->
        <finalName>rest-web</finalName>
        <plugins>
			<!-- Java compiler plugin-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
					<!-- source code -->
                    <source>${java.version}</source>
					<!-- binary -->
                    <target>${java.version}</target>
                </configuration>
            </plugin>
			<!-- WAR plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.4</version>
                <configuration>
					<!-- Setting false enables the project to be built without the presence of web.xml-->
                    <failOnMissingWebXml>false</failOnMissingWebXml>
					<!-- Web content directory: ${basedir} is a maven inbuilt property--> 
                    <warSourceDirectory>${basedir}/src/main/webapp</warSourceDirectory>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <!-- Logging with logback using SLF4J-->
        <!--SLF4J dependency -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- Logback dependencies-->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-access</artifactId>
            <version>${logback.version}</version>
        </dependency>

        <!-- JAX-RS Jersey implementation -->
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet</artifactId>
            <version>${jersey.version}</version>
        </dependency>

        <!--JAX-RS Jackson based JSON Provider-->
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <!-- Note the following dependencies are included only in test scope (i.e. not packaged in WAR) -->
        <!-- Grizzly2 - Jersey Test Framework -->
        <dependency>
            <groupId>org.glassfish.jersey.test-framework.providers</groupId>
            <artifactId>jersey-test-framework-provider-grizzly2</artifactId>
            <version>${jersey.version}</version>
            <scope>test</scope>
        </dependency>
        <!--  JSON provider only in the test scope -->
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
            <version>${jersey.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Using TestNg -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>


</project>